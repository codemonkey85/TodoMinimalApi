@page "/"
@using System.Collections.ObjectModel
@using Todo.Shared.Entities.DTO.Todo
@inject IHttpClientFactory ClientFactory
@inject ILogger<Home> Logger
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>@App.SetPageTitle("List Todos")</PageTitle>

@if (todos is null)
{
    <MudText Typo="Typo.body1">Loading, please wait...</MudText>
}
else
{
    <MudDataGrid Items="@_items" T="TodoItemDTO"
    EditMode="DataGridEditMode.Form" CommittedItemChanges="@CommittedItemChanges"
    Dense="true" Bordered="false"
    ReadOnly="false" EditTrigger="DataGridEditTrigger.Manual">
        <ToolBarContent>
            <MudText Typo="Typo.h3">Todos</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" 
                Color="Color.Primary"/>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="p => p.Name" Title="Name" />
            <PropertyColumn Property="p => p.IsComplete" Title="Status">
                <CellTemplate>
                    <MudStack Row>
                        @if (context.Item.IsComplete)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Inherit" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Inherit" />
                        }

                    </MudStack>
                </CellTemplate>
                <EditTemplate>
                    <MudSwitch @bind-Value="context.Item.IsComplete"
                    Label="Complete?" LabelPlacement="Placement.Start"
                    Color="Color.Primary"/>
                </EditTemplate>
            </PropertyColumn>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton 
                    OnClick="@context.Actions.StartEditingItemAsync" 
                    Icon="@Icons.Material.Filled.Edit" Size="@Size.Small"/>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

@code {
    private ListTodos? todos;
    private ObservableCollection<TodoItemDTO> _items = [];

    protected override async Task OnInitializedAsync()
    {
        using var client = ClientFactory.CreateClient("Todo.Api");
        todos = await client.GetFromJsonAsync<ListTodos>("/api/todos");
        _items = new(todos!.Todos);
    }

    async Task CommittedItemChanges(TodoItemDTO item)
    {
        Logger.LogInformation($"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
        using var client = ClientFactory.CreateClient("Todo.Api");
        var result = await client.PutAsJsonAsync<TodoItemDTO>($"/api/todos/{item.Id}", item);
        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Updated Item.", Severity.Success);
            _items.ReplaceItem(r => r.Id == item.Id, item);
        }
        else
        {
            Snackbar.Add("Error updating item.", Severity.Error);
        }
    }
}